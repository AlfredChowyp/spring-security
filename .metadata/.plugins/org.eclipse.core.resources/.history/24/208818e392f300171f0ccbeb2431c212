package com.yun.security.browser;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl;
import org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;

import com.yun.security.browser.authentication.MyAuthenticationFailHandler;
import com.yun.security.browser.authentication.MyAuthenticationSuccessHandler;
import com.yun.security.core.properties.SecurityProperties;
import com.yun.security.core.validate.code.ValidateCodeFilter;

@Configuration
@EnableWebSecurity
public class BrowserSecurityConfig extends WebSecurityConfigurerAdapter{

	@Autowired 
	SecurityProperties securityProperties;
	
	@Autowired
	private MyAuthenticationSuccessHandler myAuthenticationSuccessHandler;
	
	@Autowired
	private MyAuthenticationFailHandler myAuthenticationFailHandler;
	
	@Bean
	public PasswordEncoder passwordEncoder(){
		return new BCryptPasswordEncoder();
	}
	
	@Autowired
	private DataSource dataSource;
	
	@Autowired
	private UserDetailsService userDetailsService;
	
	@Bean
	public PersistentTokenRepository persistenceTokenRepository(){
		JdbcTokenRepositoryImpl tokenRepository = new JdbcTokenRepositoryImpl();
		tokenRepository.setDataSource(dataSource);
		//tokenRepository.setCreateTableOnStartup(true);
		return tokenRepository;
		
	}
	
	@Override
	protected void configure(HttpSecurity http) throws Exception{
		ValidateCodeFilter validateCodeFilter =new ValidateCodeFilter();
		
		//从属性文件中获取校验信息
		validateCodeFilter.setSecurityProperties(securityProperties);
		
		//设置校验信息
		validateCodeFilter.afterPropertiesSet();
		
		validateCodeFilter.setAuthenticationFailureHandler(myAuthenticationFailHandler);
		http.addFilterBefore(validateCodeFilter, UsernamePasswordAuthenticationFilter.class)
			.formLogin()
			.loginPage("/authentication/require") //跳转的登录页
			.loginProcessingUrl("/authentication/form") //登录时的请求
			.successHandler(myAuthenticationSuccessHandler) //表单登录成功时使用我们自己写的处理类
			.failureHandler(myAuthenticationFailHandler) //表单登录失败时使用我们自己写的处理类
			.and()
			
/*			.rememberMe()
			.tokenRepository(persistenceTokenRepository())
			.tokenValiditySeconds(securityProperties.getBrowser().getRememberMeSeconds())
			.userDetailsService(userDetailsService)*/
			
			//.and()
			.authorizeRequests()
			.antMatchers(
					"authentication/require").permitAll()
			.anyRequest()
			.authenticated()
			.and()
			.csrf().disable();
	}
}
